
@{
    ViewBag.Title = "Chart";

    var Version = "v.Beta.1.20170528";

    var Tradier_scope = Request.QueryString["scope"];
    var Tradier_state = Request.QueryString["state"];
    var Tradier_code = Request.QueryString["code"];
}

@Styles.Render("~/bundles/chart")

<h2>@ViewBag.Title.</h2>

@*Symbol*@
<div class="row">
    <div class="col-lg-2">
        <div class="input-group">
            <span class="input-group-addon chart-form chart-form-label">Exchange:</span>
            <select id="Exchange" class="form-control chart-form">
                <option value="AMEX">AMEX</option>
                <option value="NASDAQ">NASDAQ</option>
                <option value="NYSE">NYSE</option>
                <option value="US">ALL US EQUITIES</option>
                <option value="PSE">PSE</option>
                <option value="TSX">TSX</option>
                <option value="FOREX">FOREX</option>
            </select>
        </div>
    </div>
    <div class="col-lg-2">
        <div class="input-group">
            <span class="input-group-addon chart-form chart-form-label">Symbol:</span>
            <input type="text" class="form-control chart-form" id="Symbol" placeholder="________" onchange="getSymbolData()">
        </div>
    </div>
    <div class="col-lg-2">
        <ul class="nav navbar-top-links" style="padding-top:8px">
            <li class="dropdown" id="connect">
                <a id="status" class="dropdown-toggle chart-form" data-toggle="dropdown" href="#">

                </a>
                <ul class="dropdown-menu dropdown-messages chart-form">
                    <li>
                        <a href="#" onclick="connectTradier();">
                            <div><img src="/images/tradier-brokerage-logo-smaller.png" /></div>
                        </a>
                    </li>
                    <li>
                        <a href="#" onclick="connectQuestrade();">
                            <div><img src="/images/questrade-logo-smaller.png" /></div>
                        </a>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</div>

@*Body - Chart*@
<div class="row">
    <div class="col-lg-4" id="ChartData1">
        <div>
            <div class="input-group">
                <span class="input-group-addon chart-form chart-form-label">Timeframe:</span>
                <select id="DataType1" class="form-control chart-form" onchange="makeChart('ChartDiv1')">
                    <option value="Daily" selected>Daily Price - Weekly Moxie Indicator</option>
                    <option value="Weekly">Weekly Price - Monthly Moxie Indicator</option>
                    <option value="Monthly">Monthly Price - Yearly Moxie Indicator</option>
                    <option value="Hourly">Hourly Price - Daily Moxie Indicator</option>
                    <option value="15Min">15Min Price - Hourly Moxie Indicator</option>
                </select>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="maximizeChart('1');"><i class="fa fa-square-o"></i> Full</a></span>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="minimizeChart('1');"><i class="fa fa-table"></i> Tile</a></span>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="openChartSettings('1');"><i class="fa fa-cog"></i> Settings</a></span>
            </div>
        </div>
        <div>
            <div id="ChartDiv1" style="height: 75vh;"></div>
        </div>
    </div>
    <div class="col-lg-4" id="ChartData2">
        <div>
            <div class="input-group">
                <span class="input-group-addon chart-form chart-form-label">Timeframe:</span>
                <select id="DataType2" class="form-control chart-form" onchange="makeChart('ChartDiv2')">
                    <option value="Daily" selected>Daily Price - Weekly Moxie Indicator</option>
                    <option value="Weekly">Weekly Price - Monthly Moxie Indicator</option>
                    <option value="Monthly">Monthly Price - Yearly Moxie Indicator</option>
                    <option value="Hourly">Hourly Price - Daily Moxie Indicator</option>
                    <option value="15Min">15Min Price - Hourly Moxie Indicator</option>
                </select>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="maximizeChart('2');"><i class="fa fa-square-o"></i> Full</a></span>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="minimizeChart('2');"><i class="fa fa-table"></i> Tile</a></span>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="openChartSettings('2');"><i class="fa fa-cog"></i> Settings</a></span>
            </div>
        </div>
        <div>
            <div id="ChartDiv2" style="height: 75vh; "></div>
        </div>
    </div>
    <div class="col-lg-4" id="ChartData3">
        <div>
            <div class="input-group">
                <span class="input-group-addon chart-form chart-form-label">Timeframe:</span>
                <select id="DataType3" class="form-control chart-form" onchange="makeChart('ChartDiv3')">
                    <option value="Daily" selected>Daily Price - Weekly Moxie Indicator</option>
                    <option value="Weekly">Weekly Price - Monthly Moxie Indicator</option>
                    <option value="Monthly">Monthly Price - Yearly Moxie Indicator</option>
                    <option value="Hourly">Hourly Price - Daily Moxie Indicator</option>
                    <option value="15Min">15Min Price - Hourly Moxie Indicator</option>
                </select>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="maximizeChart('3');"><i class="fa fa-square-o"></i> Full</a></span>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="minimizeChart('3');"><i class="fa fa-table"></i> Tile</a></span>
                <span class="input-group-addon chart-form chart-form-label"><a href="javascript:;" onclick="openChartSettings('3');"><i class="fa fa-cog"></i> Settings</a></span>
            </div>
        </div>
        <div>
            <div id="ChartDiv3" style="height: 75vh;"></div>
        </div>
    </div>
</div>

@*Chart settings*@
<div class="modal fade" id="ChartSettings">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background: #030433;">
            <div class="modal-header">
                <h5 class="modal-title chart-form">Chart Settings</h5>
            </div>
            <div class="modal-body">
                <div class="input-group">
                    <span class="input-group-addon chart-form chart-form-label">Enable cursor:</span>
                    <input id="ChartSettings_EnableCursor" type="checkbox" value="">
                </div>
                <div class="input-group">
                    <span class="input-group-addon chart-form chart-form-label">Show volume:</span>
                    <input id="ChartSettings_ShowVolume" type="checkbox" value="">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="applyChartSettings()">Apply</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@Scripts.Render("~/bundles/amchart")


<script type="text/javascript">
    var _symbol = "";
    var _symbolDescription = "";
    var _symbolEOD;
    var _symbolIntraday;

    var _chartDataSet = [new AmCharts.DataSet(), new AmCharts.DataSet(), new AmCharts.DataSet()];

    var _chart1;
    var _chart2;
    var _chart3;

    var _chartSettingsSequence;

    var _goldColor = "#FFA200";
    var _grayColor = "#858583";
    var _yellowColor = "#FFFF00";
    var _greenColor = "#00FF00";
    var _blueColor = "#0000FF";
    var _darkBlueColor = "#030433";
    var _blackColor = "#000000";
    var _whiteColor = "#FFFFFF";
    var _redColor = "#FF0000";
    var _darkGreenColor = "#65BF04";
    var _magentaColor = "#9C0063";
    var _seaGreenColor = "#2DD493";
    var _violetColor = "#8342E5";
    var _pinkColor = "#EE4FEC";
    var _orangeColor = "#FFA500";
    var _salmonColor = "#FFA07A";

    // broker connection functions
    function connectQuestrade() {
        toastr.error("Not yet applicable.");
    }
    function connectTradier() {
        setCookie("cookie_broker", "Tradier", 1);
        location.href = "https://api.tradier.com/v1/oauth/authorize?client_id=pUHZDBJyOEgoeX9W7cxnpQR35MBk4YbY&scope=read,write,market,trade&state=moxietrader";
    }
    function getTradierTimeSales(symbol) {
        var token = getCookie("cookie_tradier_access_token");
        if (token != "") {
            $.ajax({
                type: 'GET',
                url: '/api/tradierTimeSales/' + symbol + '/' + token,
                success: function (result) {
                    if (result.series.data.length > 0) {
                        _symbolIntraday = result.series.data;
                    }
                    toastr.success("Symbol intraday data loaded.");
                }
            });
        } else {
            toastr.error("No broker connection.");
        }
    }
    // cookie functions
    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires;
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
        }
        return "";
    }
    // status bar
    function setStatus() {
        var broker = getCookie("cookie_broker");
        if (broker == "Tradier") {
            if (getCookie("cookie_tradier_access_token") != "") {
                document.getElementById("status").innerHTML = "<span class='hidden-xs connected'><i class='fa fa-circle fa-fw'></i> - Connected!</span>";
            } else {
                document.getElementById("status").innerHTML = "<span class='hidden-xs not_connected'><i class='fa fa-circle-o fa-fw'></i> - Connect Now!</span>";
            }
        } else {
            document.getElementById("status").innerHTML = "<span class='hidden-xs not_connected'><i class='fa fa-circle-o fa-fw'></i> - Connect Now!</span>";
        }
    }
    // get symbol data
    function getSymbolData() {
        var symbol = $('#Symbol').val().toUpperCase();

        symbol = symbol.replace(".", ",");

        if (document.getElementById("Exchange").value == "TSX") {
            document.getElementById("Symbol").value = symbol;
            symbol = "TSX-" + symbol;
        } else if (document.getElementById("Exchange").value == "FOREX") {
            document.getElementById("Symbol").value = symbol;
            symbol = "FX-" + symbol;
        } else if (document.getElementById("Exchange").value == "PSE") {
            document.getElementById("Symbol").value = symbol;
            symbol = "PSE-" + symbol;
        } else {
            document.getElementById("Symbol").value = symbol;
        }

        if (symbol != "") {
            // EOD Historical data
            $.ajax({
                url: '/api/stockPrice/' + symbol,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (data) {
                    if (data.StockPrices.length > 0) {
                        _symbol = data.Symbol;
                        _symbolDescription = data.SymbolDescription;
                        _symbolEOD = data.StockPrices;

                        document.getElementById("Exchange").value = data.Exchange;

                        $("#ChartData1").show();
                        $("#ChartData1").removeClass("col-lg-12");
                        $("#ChartData1").addClass("col-lg-4");

                        $("#ChartData2").show();
                        $("#ChartData1").removeClass("col-lg-12");
                        $("#ChartData2").addClass("col-lg-4");

                        $("#ChartData3").show();
                        $("#ChartData1").removeClass("col-lg-12");
                        $("#ChartData3").addClass("col-lg-4");

                        $('#ChartDiv1').empty();
                        $('#ChartDiv2').empty();
                        $('#ChartDiv3').empty();

                        makeChart("ChartDiv1");
                        makeChart("ChartDiv2");
                        makeChart("ChartDiv3");

                        toastr.success("Symbol data loaded.");
                    } else {
                        toastr.error("Symbol not found.");
                    }
                }
            }).fail(
                function (xhr, textStatus, err) {
                    toastr.error(err);
                }
            );

            // Intra day historical data (need broker connection)
            getTradierTimeSales(symbol);
        }
    }
    // compute data
    function computeData(dataType) {
        var data = [];

        var weekly_open = 'NaN';
        var weekly_high = 'NaN';
        var weekly_low = 'NaN';
        var weekly_close = 'NaN';
        var weekly_volume = 'NaN';

        var monthly_open = 'NaN';
        var monthly_high = 'NaN';
        var monthly_low = 'NaN';
        var monthly_close = 'NaN';
        var monthly_volume = 'NaN';

        var hourly_open = 'NaN';
        var hourly_high = 'NaN';
        var hourly_low = 'NaN';
        var hourly_close = 'NaN';
        var hourly_volume = 'NaN';

        var macd_open = 'NaN';
        var macd_high = 'NaN';
        var macd_low = 'NaN';
        var macd_close = 'NaN';
        var macd_volume = 'NaN';

        var monthly_previousMonth = 0;
        var yearly_previousYear = 0;

        // ============
        // Daily-Weekly
        // ============
        if (dataType == "Daily") {              
            if (_symbolEOD.length > 0) {
                for (var i = _symbolEOD.length - 1; i >= 0; i--) {
                    var quoteDate = parseChartDate(_symbolEOD[i].QuoteDate);
                    // Weekly
                    if (i == _symbolEOD.length - 1) {
                        macd_open = _symbolEOD[i].OpenPrice;
                        macd_high = _symbolEOD[i].HighPrice;
                        macd_low = _symbolEOD[i].LowPrice;
                        macd_close = _symbolEOD[i].ClosePrice;
                        macd_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);
                    } else {
                        if (quoteDate.getDay() == 5) {
                            macd_open = _symbolEOD[i].OpenPrice;
                            macd_high = _symbolEOD[i].HighPrice;
                            macd_low = _symbolEOD[i].LowPrice;
                            macd_close = _symbolEOD[i].ClosePrice;
                            macd_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);
                        } else {
                            macd_open = 'NaN';
                            macd_high = 'NaN';
                            macd_low = 'NaN';
                            macd_close = 'NaN';
                            macd_volume = 'NaN';
                        }
                    }
                    // Save Daily-Weekly
                    data.push({
                        date: quoteDate,

                        open: _symbolEOD[i].OpenPrice,
                        high: _symbolEOD[i].HighPrice,
                        low: _symbolEOD[i].LowPrice,
                        close: _symbolEOD[i].ClosePrice,
                        volume: AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2),

                        macd_open: macd_open,
                        macd_high: macd_high,
                        macd_low: macd_low,
                        macd_close: macd_close,
                        macd_volume: macd_volume,

                        ema1: 'NaN',
                        ema2: 'NaN',
                        sma1: 'NaN',
                        sma2: 'NaN',

                        macd: 'NaN',
                        macdEma1: 'NaN',
                        macdEma2: 'NaN',
                        macdSignal: 'NaN',
                        macdColor: _greenColor
                    });
                }
            }

        // ==============
        // Weekly-Monthly
        // ==============  
        } else if (dataType == "Weekly") {     
            if (_symbolEOD.length > 0) {
                for (var i = _symbolEOD.length - 1; i >= 0; i--) {
                    var quoteDate = parseChartDate(_symbolEOD[i].QuoteDate);
                    if (i == _symbolEOD.length - 1) {
                        weekly_open = _symbolEOD[i].OpenPrice;
                        weekly_high = _symbolEOD[i].HighPrice;
                        weekly_low = _symbolEOD[i].LowPrice;
                        weekly_close = _symbolEOD[i].ClosePrice;
                        weekly_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);

                        monthly_previousMonth = quoteDate.getMonth();
                    } else {
                        // Weekly
                        if (quoteDate.getDay() == 5) {
                            weekly_open = _symbolEOD[i].OpenPrice;
                            weekly_high = _symbolEOD[i].HighPrice;
                            weekly_low = _symbolEOD[i].LowPrice;
                            weekly_close = _symbolEOD[i].ClosePrice;
                            weekly_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);

                            // Monthly
                            if (monthly_previousMonth != quoteDate.getMonth()) {
                                macd_open = _symbolEOD[i].OpenPrice;
                                macd_high = _symbolEOD[i].HighPrice;
                                macd_low = _symbolEOD[i].LowPrice;
                                macd_close = _symbolEOD[i].ClosePrice;
                                macd_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);

                                monthly_previousMonth = quoteDate.getMonth();
                            } else {
                                macd_open = 'NaN';
                                macd_high = 'NaN';
                                macd_low = 'NaN';
                                macd_close = 'NaN';
                                macd_volume = 'NaN';
                            }

                        } else {
                            weekly_open = 'NaN';
                            weekly_high = 'NaN';
                            weekly_low = 'NaN';
                            weekly_close = 'NaN';
                            weekly_volume = 'NaN';
                        }
                    }
                    // Save Weekly-Monthly
                    if (weekly_close != 'NaN') {
                        data.push({
                            date: quoteDate,

                            open: weekly_open,
                            high: weekly_high,
                            low: weekly_low,
                            close: weekly_close,
                            volume: weekly_volume,

                            macd_open: macd_open,
                            macd_high: macd_high,
                            macd_low: macd_low,
                            macd_close: macd_close,
                            macd_volume: macd_volume,

                            ema1: 'NaN',
                            ema2: 'NaN',
                            sma1: 'NaN',
                            sma2: 'NaN',

                            macd: 'NaN',
                            macdEma1: 'NaN',
                            macdEma2: 'NaN',
                            macdSignal: 'NaN',
                            macdColor: _greenColor
                        });
                    }
                }
            }

        // ==============
        // Monthly-Yearly
        // ==============    
        } else if (dataType == "Monthly") {     
            if (_symbolEOD.length > 0) {
                for (var i = _symbolEOD.length - 1; i >= 0; i--) {
                    var quoteDate = parseChartDate(_symbolEOD[i].QuoteDate);

                    if (i == _symbolEOD.length - 1) {
                        monthly_open = _symbolEOD[i].OpenPrice;
                        monthly_high = _symbolEOD[i].HighPrice;
                        monthly_low = _symbolEOD[i].LowPrice;
                        monthly_close = _symbolEOD[i].ClosePrice;
                        monthly_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);

                        monthly_previousMonth = quoteDate.getMonth();

                        yearly_previousYear = quoteDate.getYear();
                    } else {
                        // Monthly
                        if (monthly_previousMonth != quoteDate.getMonth()) {
                            monthly_open = _symbolEOD[i].OpenPrice;
                            monthly_high = _symbolEOD[i].HighPrice;
                            monthly_low = _symbolEOD[i].LowPrice;
                            monthly_close = _symbolEOD[i].ClosePrice;
                            monthly_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);

                            monthly_previousMonth = quoteDate.getMonth();

                            // Yearly
                            if (yearly_previousYear != quoteDate.getYear()) {
                                macd_open = _symbolEOD[i].OpenPrice;
                                macd_high = _symbolEOD[i].HighPrice;
                                macd_low = _symbolEOD[i].LowPrice;
                                macd_close = _symbolEOD[i].ClosePrice;
                                macd_volume = AmCharts.roundTo(_symbolEOD[i].Volume / 1000000, 2);

                                yearly_previousYear = quoteDate.getYear();
                            } else {
                                macd_open = 'NaN';
                                macd_high = 'NaN';
                                macd_low = 'NaN';
                                macd_close = 'NaN';
                                macd_volume = 'NaN';
                            }
                        } else {
                            monthly_open = 'NaN';
                            monthly_high = 'NaN';
                            monthly_low = 'NaN';
                            monthly_close = 'NaN';
                            monthly_volume = 'NaN';
                        }
                    }

                    // Save Weekly-Monthly
                    if (monthly_close != 'NaN') {
                        data.push({
                            date: quoteDate,

                            open: monthly_open,
                            high: monthly_high,
                            low: monthly_low,
                            close: monthly_close,
                            volume: monthly_volume,

                            macd_open: macd_open,
                            macd_high: macd_high,
                            macd_low: macd_low,
                            macd_close: macd_close,
                            macd_volume: macd_volume,

                            ema1: 'NaN',
                            ema2: 'NaN',
                            sma1: 'NaN',
                            sma2: 'NaN',

                            macd: 'NaN',
                            macdEma1: 'NaN',
                            macdEma2: 'NaN',
                            macdSignal: 'NaN',
                            macdColor: _greenColor
                        });
                    }

                }
            }

        // ============
        // 15Min-Hourly
        // ============
        } else if (dataType == "15Min") {       
            if (_symbolIntraday.length > 0) {
                for (var i = 0; i < _symbolIntraday.length; i++) {

                    var d1 = _symbolIntraday[i].time.replace('T', '-');
                    var d2 = d1.replace(/:/g, '-');
                    var dp = d2.split('-');
                    var quoteDate = new Date(dp[0], dp[1] - 1, dp[2], dp[3], dp[4], dp[5]);

                    if (((quoteDate.getHours() + (quoteDate.getMinutes() / 100)) >= 9.30) && ((quoteDate.getHours() + (quoteDate.getMinutes() / 100)) <= 16)) {
                        // hourly
                        if (quoteDate.getMinutes() == 0) {
                            macd_open = _symbolIntraday[i].open;
                            macd_high = _symbolIntraday[i].high;
                            macd_low = _symbolIntraday[i].low;
                            macd_close = _symbolIntraday[i].close;
                            macd_volume = AmCharts.roundTo(_symbolIntraday[i].volume / 1000000, 2);
                        } else {
                            macd_open = 'NaN';
                            macd_high = 'NaN';
                            macd_low = 'NaN';
                            macd_close = 'NaN';
                            macd_volume = 'NaN';
                        }

                        // Save 15Min-Hourly
                        data.push({
                            date: quoteDate,

                            open: _symbolIntraday[i].open,
                            high: _symbolIntraday[i].high,
                            low: _symbolIntraday[i].low,
                            close: _symbolIntraday[i].close,
                            volume: AmCharts.roundTo(_symbolIntraday[i].volume / 1000000, 2),

                            macd_open: macd_open,
                            macd_high: macd_high,
                            macd_low: macd_low,
                            macd_close: macd_close,
                            macd_volume: macd_volume,

                            ema1: 'NaN',
                            ema2: 'NaN',
                            sma1: 'NaN',
                            sma2: 'NaN',

                            macd: 'NaN',
                            macdEma1: 'NaN',
                            macdEma2: 'NaN',
                            macdSignal: 'NaN',
                            macdColor: _greenColor,

                            macd2: 'NaN',                   // Additional overlay 120 min
                            macd2Ema1: 'NaN',
                            macd2Ema2: 'NaN',
                            macd2Signal: 'NaN',
                            macd2Color: _greenColor
                        });
                    }
                }
            }

        // ============
        // Hourly-Daily 
        // ============
        } else if (dataType == "Hourly") {
            if (_symbolIntraday.length > 0) {
                for (var i = 0; i < _symbolIntraday.length; i++) {

                    var d1 = _symbolIntraday[i].time.replace('T', '-');
                    var d2 = d1.replace(/:/g, '-');
                    var dp = d2.split('-');
                    var quoteDate = new Date(dp[0], dp[1] - 1, dp[2], dp[3], dp[4], dp[5]);

                    if (((quoteDate.getHours() + (quoteDate.getMinutes() / 100)) >= 9.30) && ((quoteDate.getHours() + (quoteDate.getMinutes() / 100)) <= 16)) {
                        if (quoteDate.getMinutes() == 0) {
                            hourly_open = _symbolIntraday[i].open;
                            hourly_high = _symbolIntraday[i].high;
                            hourly_low = _symbolIntraday[i].low;
                            hourly_close = _symbolIntraday[i].close;
                            hourly_volume = AmCharts.roundTo(_symbolIntraday[i].volume / 1000000, 2);

                            if (quoteDate.getHours() == 16) {
                                macd_open = _symbolIntraday[i].open;
                                macd_high = _symbolIntraday[i].high;
                                macd_low = _symbolIntraday[i].low;
                                macd_close = _symbolIntraday[i].close;
                                macd_volume = AmCharts.roundTo(_symbolIntraday[i].volume / 1000000, 2);
                            } else {
                                macd_open = 'NaN';
                                macd_high = 'NaN';
                                macd_low = 'NaN';
                                macd_close = 'NaN';
                                macd_volume = 'NaN';
                            }
                        } else {
                            hourly_open = 'NaN';
                            hourly_high = 'NaN';
                            hourly_low = 'NaN';
                            hourly_close = 'NaN';
                            hourly_volume = 'NaN';
                        }

                        // Save Hourly-Daily
                        if (hourly_close != 'NaN') {
                            data.push({
                                date: quoteDate,

                                open: hourly_open,
                                high: hourly_high,
                                low: hourly_low,
                                close: hourly_close,
                                volume: hourly_volume,

                                macd_open: macd_open,
                                macd_high: macd_high,
                                macd_low: macd_low,
                                macd_close: macd_close,
                                macd_volume: macd_volume,

                                ema1: 'NaN',
                                ema2: 'NaN',
                                sma1: 'NaN',
                                sma2: 'NaN',

                                macd: 'NaN',
                                macdEma1: 'NaN',
                                macdEma2: 'NaN',
                                macdSignal: 'NaN',
                                macdColor: _greenColor
                            });
                        }
                    }
                }
            }
        }

        // ============
        // Compute MACD
        // ============
        computeDataMACD(data);

        // ===============
        // Compute EMA/SMA
        // ===============
        computeDataMovingAverate(data);

        // ============
        // Extend chart
        // ============
        if (dataType == "Daily" || dataType == "Weekly" || dataType == "Monthly") {
            var futureDate = new Date((new Date(_symbolEOD[0].QuoteDate)).add(1).days());
            for (var i = 0; i < 126; i++) {
                data.push({
                    date: new Date(futureDate)
                });
                futureDate = futureDate.add(1).day();
            }
        } else {
            var futureDate = new Date(_symbolEOD[0].QuoteDate);
            futureDate.setMinutes(futureDate.getMinutes() + 20);
            for (var i = 0; i < 126; i++) {
                data.push({
                    date: new Date(futureDate)
                });
                futureDate.setMinutes(futureDate.getMinutes() + 20);
            }
        }


        return data;
    }
    function computeDataMACD(data) {
        var macd_index = 0;

        var ema1_closePrices = 0;
        var ema1_previous = 0;
        var ema1 = 0;

        var ema2_closePrices = 0;
        var ema2_previous = 0;
        var ema2 = 0;

        var macd_values = 0;
        var macd_values_previous = 0;
        var macd_signal = 0;
        var macd_signal_previous = 0;

        var fast_length = 12;
        var slow_length = 26;
        var macd_length = 9

        var macd_color = _greenColor;
        var closePrice = 0;

        for (var i = 0; i < data.length; i++) {
            closePrice = data[i].macd_close;
            if (closePrice != 'NaN') {
                // fast ema
                if (macd_index < (fast_length - 1)) {
                    ema1_closePrices = ema1_closePrices + closePrice;
                } else if (macd_index == (fast_length - 1)) {
                    ema1 = ema1_closePrices / fast_length;
                    ema1_previous = ema1;
                    data[i].macdEma1 = ema1;
                } else if (macd_index > (fast_length - 1)) {
                    ema1 = (closePrice * (2 / (fast_length + 1)) + ema1_previous * (1 - (2 / (fast_length + 1))));
                    ema1_previous = ema1;
                    data[i].macdEma1 = ema1;
                }
                // slow ema
                if (macd_index < (slow_length - 1)) {
                    ema2_closePrices = ema2_closePrices + closePrice;
                } else if (macd_index == (slow_length - 1)) {
                    ema2 = ema2_closePrices / slow_length;
                    ema2_previous = ema2;
                    data[i].macdEma2 = ema2;
                    data[i].macd = data[i].macdEma1 - ema2;
                    data[i].macdColor = _greenColor;
                    if (i > 0 && (macd_values_previous > data[i].macd)) {
                        data[i].macdColor = _redColor;
                    }
                    macd_values_previous = data[i].macd;
                } else if (macd_index > (slow_length - 1)) {
                    ema2 = (closePrice * (2 / (slow_length + 1)) + ema2_previous * (1 - (2 / (slow_length + 1))));
                    ema2_previous = ema2;
                    data[i].macdEma2 = ema2;
                    data[i].macd = data[i].macdEma1 - ema2;
                    data[i].macdColor = _greenColor;
                    if (i > 0 && (macd_values_previous > data[i].macd)) {
                        data[i].macdColor = _redColor;
                    }
                    macd_values_previous = data[i].macd;
                }
                // signal
                if (macd_index < (slow_length + macd_length - 1)) {
                    macd_values = macd_values + data[i].macd;
                } else if (macd_index == (slow_length + macd_length - 1)) {
                    macd_signal = macd_values / macd_length;
                    macd_signal_previous = macd_signal;
                    data[i].macdSignal = macd_signal;
                } else if (macd_index > (slow_length + macd_length - 1)) {
                    macd_signal = (data[i].macd * (2 / (macd_length + 1)) + macd_signal * (1 - (2 / (macd_length + 1))));
                    macd_signal_previous = macd_signal;
                    data[i].macdSignal = macd_signal;
                }

                macd_index++;
            }
        }
    }
    function computeDataMovingAverate(data) {
        var day = 1;

        var ma1NoOfDays = 8;
        var ma1_close = 0;
        var ma1_previous = 0;
        var ma1 = 0;

        var ma2NoOfDays = 21;
        var ma2_close = 0;
        var ma2_previous = 0;
        var ma2 = 0;

        var ma3NoOfDays = 50;
        var ma3_close = 0;
        var ma3_previous = 0;
        var ma3 = 0;

        var ma4NoOfDays = 200;
        var ma4_close = 0;
        var ma4_previous = 0;
        var ma4 = 0;


        var closePrice = 0;

        for (var i = 0; i < data.length; i++) {
            closePrice = data[i].close;

            //ema1
            if (day < ma1NoOfDays) {
                ma1_close = ma1_close + closePrice;
            } else if (day == ma1NoOfDays) {
                ma1_close = ma1_close + closePrice;
                ma1 = ma1_close / ma1NoOfDays;
                ma1_previous = ma1;
                data[i].ema1 = ma1;
            } else if (day > ma1NoOfDays) {
                ma1 = (closePrice * (2 / (ma1NoOfDays + 1)) + ma1_previous * (1 - (2 / (ma1NoOfDays + 1))));
                ma1_previous = ma1;
                data[i].ema1 = ma1;
            }

            // ema2
            if (day < ma2NoOfDays) {
                ma2_close = ma2_close + closePrice;
            } else if (day == ma2NoOfDays) {
                ma2_close = ma2_close + closePrice;
                ma2 = ma2_close / ma2NoOfDays;
                ma2_previous = ma2;
                data[i].ema2 = ma2;
            } else if (day > ma2NoOfDays) {
                ma2 = (closePrice * (2 / (ma2NoOfDays + 1)) + ma2_previous * (1 - (2 / (ma2NoOfDays + 1))));
                ma2_previous = ma2;
                data[i].ema2 = ma2;
            }

            //sma1
            if (day < ma3NoOfDays) {
                ma3_close = ma3_close + closePrice;
            } else if (day == ma3NoOfDays) {
                ma3_close = ma3_close + closePrice;
                ma3 = ma3_close / ma3NoOfDays;
                data[i].sma1 = ma3;
            } else if (day > ma3NoOfDays) {
                ma3_close = ma3_close + closePrice - data[i - ma3NoOfDays].close;
                ma3 = ma3_close / ma3NoOfDays;
                data[i].sma1 = ma3;
            }

            //sma2
            if (day < ma4NoOfDays) {
                ma4_close = ma4_close + closePrice;
            } else if (day == ma4NoOfDays) {
                ma4_close = ma4_close + closePrice;
                ma4 = ma4_close / ma4NoOfDays;
                data[i].sma2 = ma4;
            } else if (day > ma4NoOfDays) {
                ma4_close = ma4_close + closePrice - data[i - ma4NoOfDays].close;
                ma4 = ma4_close / ma4NoOfDays;
                data[i].sma2 = ma4;
            }

            day++;
        }
    }
    // parse date
    function parseChartDate(quoteDate) {
        var parts = quoteDate.split('-');
        return new Date(parts[0], parts[1] - 1, parts[2]);
    }
    function dateAdd(date, interval, units) {
        var ret = new Date(date); //don't change original date
        var checkRollover = function () { if (ret.getDate() != date.getDate()) ret.setDate(0); };
        switch (interval.toLowerCase()) {
            case 'year': ret.setFullYear(ret.getFullYear() + units); checkRollover(); break;
            case 'quarter': ret.setMonth(ret.getMonth() + 3 * units); checkRollover(); break;
            case 'month': ret.setMonth(ret.getMonth() + units); checkRollover(); break;
            case 'week': ret.setDate(ret.getDate() + 7 * units); break;
            case 'day': ret.setDate(ret.getDate() + units); break;
            case 'hour': ret.setTime(ret.getTime() + units * 3600000); break;
            case 'minute': ret.setTime(ret.getTime() + units * 60000); break;
            case 'second': ret.setTime(ret.getTime() + units * 1000); break;
            default: ret = undefined; break;
        }
        return ret;
    }
    // make chart
    function makeChart(dom) {
        var chartDataProvider = [];
        var dataSetIndex = 0;
        // data type
        var chartDataType;
        if (dom == "ChartDiv1") {
            chartDataType = document.getElementById("DataType1").value;
            chartDataProvider = computeData(document.getElementById("DataType1").value);
            dataSetIndex = 0;
        } else if (dom == "ChartDiv2") {
            chartDataType = document.getElementById("DataType2").value;
            chartDataProvider = computeData(document.getElementById("DataType2").value);
            dataSetIndex = 1;
        } else if (dom == "ChartDiv3") {
            chartDataType = document.getElementById("DataType3").value;
            chartDataProvider = computeData(document.getElementById("DataType3").value);
            dataSetIndex = 2;
        } else {
            chartDataType = "Daily";
        }

        //chart data set
        _chartDataSet[dataSetIndex] = new AmCharts.DataSet();
        _chartDataSet[dataSetIndex].title = _symbol;
        _chartDataSet[dataSetIndex].color = "#7f8da9";
        _chartDataSet[dataSetIndex].fieldMappings = [
            { fromField: "open", toField: "open" },
            { fromField: "high", toField: "high" },
            { fromField: "low", toField: "low" },
            { fromField: "close", toField: "close" },
            { fromField: "volume", toField: "volume" },

            { fromField: "macd", toField: "macd" },
            { fromField: "macdColor", toField: "macdColor" },
            { fromField: "macdSignal", toField: "macdSignal" },

            { fromField: "ema1", toField: "ema1" },
            { fromField: "ema2", toField: "ema2" },
            { fromField: "sma1", toField: "sma1" },
            { fromField: "sma2", toField: "sma2" }
        ];
        _chartDataSet[dataSetIndex].dataProvider = chartDataProvider;
        _chartDataSet[dataSetIndex].categoryField = "date";

        // chart value Axes (X-Axis)
        var chartAxis1 = new AmCharts.ValueAxis();
        chartAxis1.id = "PriceAxis";
        chartAxis1.color = _blueColor;

        var chartAxis2 = new AmCharts.ValueAxis();
        chartAxis2.id = "VolumeAxis"
        chartAxis2.labelsEnabled = false;
        chartAxis2.position = "right";
        chartAxis2.gridThickness = 0;
        chartAxis2.axisThickness = 0;

        var chartAxis3 = new AmCharts.ValueAxis();
        chartAxis3.id = "MACDAxis"
        chartAxis3.color = _blueColor;
        chartAxis3.strictMinMax = true;

        // chart category axis settings (Y-Axis)
        var categoryAxesSettings = new AmCharts.CategoryAxesSettings()
        categoryAxesSettings.maxSeries = 0;
        categoryAxesSettings.groupToPeriods = ["15mm", "hh", "DD", "WW", "MM"];
        categoryAxesSettings.parseDates = true;

        if (chartDataType == "Daily") categoryAxesSettings.minPeriod = "DD";
        else if (chartDataType == "Weekly") categoryAxesSettings.minPeriod = "WW";
        else if (chartDataType == "Monthly") categoryAxesSettings.minPeriod = "MM";
        else if (chartDataType == "Hourly") categoryAxesSettings.minPeriod = "hh";
        else if (chartDataType == "15Min") categoryAxesSettings.minPeriod = "15mm";
        else categoryAxesSettings.minPeriod = "DD";

        categoryAxesSettings.equalSpacing = true;
        categoryAxesSettings.color = _blueColor;
        categoryAxesSettings.inside = true;

        // chart cursor settings
        var chartCursorSettings = new AmCharts.ChartCursorSettings();
        chartCursorSettings.valueLineEnabled = true;
        chartCursorSettings.valueBalloonsEnabled = true;

        // fields
        var openField = "open";
        var closeField = "close";
        var highField = "high";
        var lowField = "low";
        var volumeField = "volume";
        var macdField = "macd";
        var macdColorField = "macdColor";
        var macdSignalField = "macdSignal";
        var ema1Field = "ema1";
        var ema2Field = "ema2";
        var sma1Field = "sma1";
        var sma2Field = "sma2";

        // chart graphs
        var chartGraph1 = new AmCharts.StockGraph();
        chartGraph1.id = "Price";
        chartGraph1.title = "Price";
        chartGraph1.type = "candlestick";
        chartGraph1.openField = openField;
        chartGraph1.closeField = closeField;
        chartGraph1.highField = highField;
        chartGraph1.lowField = lowField;
        chartGraph1.valueField = closeField;
        chartGraph1.lineColor = "#0FB203";
        chartGraph1.fillColors = "#0FB203";
        chartGraph1.negativeLineColor = "#A80008";
        chartGraph1.negativeFillColors = "#A80008";
        chartGraph1.fillAlphas = 1;
        chartGraph1.useDataSetColors = false;
        chartGraph1.showBalloon = true;
        chartGraph1.proCandlesticks = false;
        chartGraph1.periodValue = "Close";
        chartGraph1.valueAxis = chartAxis1;

        var chartGraph2 = new AmCharts.StockGraph();
        chartGraph2.id = "Volume";
        chartGraph2.title = "Volume (M)";
        chartGraph2.valueField = volumeField;
        chartGraph2.type = "column";
        chartGraph2.useDataSetColors = false;
        chartGraph2.color = _grayColor;
        chartGraph2.lineColor = _grayColor;
        chartGraph2.showBalloon = false;
        chartGraph2.lineAlpha = 0;
        chartGraph2.fillAlphas = 0.3;
        chartGraph2.valueAxis = chartAxis2;

        var chartGraph3 = new AmCharts.StockGraph();
        chartGraph3.id = "MACD";
        chartGraph3.title = "MACD";
        chartGraph3.valueField = macdField;
        chartGraph3.useDataSetColors = false;
        chartGraph3.lineColorField = macdColorField;
        chartGraph3.type = "step";
        chartGraph3.lineThickness = 1;
        chartGraph3.showBalloon = false;
        chartGraph3.valueAxis = chartAxis3;

        var chartGraph5 = new AmCharts.StockGraph();
        chartGraph5.id = "graphEMA1";
        chartGraph5.valueField = ema1Field;
        chartGraph5.title = "EMA1";
        chartGraph5.useDataSetColors = false;
        chartGraph5.type = "line";
        chartGraph5.lineThickness = 1;
        chartGraph5.showBalloon = false;
        chartGraph5.lineColor = _blueColor;
        chartGraph5.valueAxis = chartAxis1;

        var chartGraph6 = new AmCharts.StockGraph();
        chartGraph6.id = "graphEMA2";
        chartGraph6.valueField = ema2Field;
        chartGraph6.title = "EMA2";
        chartGraph6.useDataSetColors = false;
        chartGraph6.type = "line";
        chartGraph6.lineThickness = 1;
        chartGraph6.showBalloon = false;
        chartGraph6.lineColor = _orangeColor;
        chartGraph6.valueAxis = chartAxis1;

        var chartGraph7 = new AmCharts.StockGraph();
        chartGraph7.id = "graphSMA1";
        chartGraph7.valueField = sma1Field;
        chartGraph7.title = "SMA1";
        chartGraph7.useDataSetColors = false;
        chartGraph7.type = "line";
        chartGraph7.lineThickness = 1;
        chartGraph7.showBalloon = false;
        chartGraph7.lineColor = _magentaColor;
        chartGraph7.valueAxis = chartAxis1;

        var chartGraph8 = new AmCharts.StockGraph();
        chartGraph8.id = "graphSMA2";
        chartGraph8.valueField = sma2Field;
        chartGraph8.title = "SMA2";
        chartGraph8.useDataSetColors = false;
        chartGraph8.type = "line";
        chartGraph8.lineThickness = 1;
        chartGraph8.showBalloon = false;
        chartGraph8.lineColor = _salmonColor;
        chartGraph8.valueAxis = chartAxis1;

        var chartScrollbarSettings = new AmCharts.ChartScrollbarSettings();
        chartScrollbarSettings.graph = chartGraph1;
        chartScrollbarSettings.graphType = "line";
        chartScrollbarSettings.graphLineColor = _blackColor;
        chartScrollbarSettings.graphFillColor = _blackColor;
        chartScrollbarSettings.selectedBackgroundAlpha = 0.2;
        chartScrollbarSettings.backgroundAlpha = 0;
        chartScrollbarSettings.gridAlpha = 0;
        chartScrollbarSettings.color = _blueColor;

        // chart panels
        var chartPanel1 = new AmCharts.StockPanel();
        chartPanel1.showCategoryAxis = false;
        chartPanel1.title = _symbolDescription;
        chartPanel1.percentHeight = 70;
        chartPanel1.addValueAxis(chartAxis1);
        chartPanel1.addValueAxis(chartAxis2);
        chartPanel1.addStockGraph(chartGraph1); // price
        chartPanel1.addStockGraph(chartGraph2); // volume
        chartPanel1.addStockGraph(chartGraph5); // ema1 - 8ema
        chartPanel1.addStockGraph(chartGraph6); // ema2 - 21ema
        chartPanel1.addStockGraph(chartGraph7); // sma1 - 50sma
        chartPanel1.addStockGraph(chartGraph8); // sma2 - 200sma

        var zeroLine = new AmCharts.TrendLine();
        zeroLine.lineColor = _whiteColor;

        zeroLine.initialDate = chartDataProvider[0]["date"];
        zeroLine.finalDate = chartDataProvider[chartDataProvider.length - 1]["date"];

        zeroLine.initialValue = 0;
        zeroLine.finalValue = 0;
        zeroLine.lineThickness = 1;

        var chartPanel2 = new AmCharts.StockPanel();
        chartPanel2.allowTurningOff = true;
        chartPanel2.percentHeight = 30;
        chartPanel2.addValueAxis(chartAxis3);
        chartPanel2.addStockGraph(chartGraph3);
        chartPanel2.addTrendLine(zeroLine);

        // trend lines (magenta channel)
        var magentaChannelTop = new AmCharts.TrendLine();
        var magentaChannelMid = new AmCharts.TrendLine();
        var magentaChannelBot = new AmCharts.TrendLine();

        // Add magenta channel for daily chart
        if (chartDataType == "Daily") {
            var channelData = chartDataProvider.slice(chartDataProvider.length - 253, chartDataProvider.length - 1);
            drawMagentaChannel(chartPanel1, channelData, 1, 252, magentaChannelTop, magentaChannelBot, magentaChannelMid);
        }

        // chart
        var chart = new AmCharts.AmStockChart();
        chart.pathToImages = "/amcharts/amcharts/images/";
        chart.addClassNames = true;
        chart.hideStockEvents();
        chart.dataSets = [_chartDataSet[dataSetIndex]];
        chart.panels = [chartPanel1, chartPanel2];
        chart.categoryAxesSettings = categoryAxesSettings;
        chart.chartCursorSettings = chartCursorSettings;
        chart.chartScrollbarSettings = chartScrollbarSettings;
        chart.write(dom);

        // save chart
        if (dom == "ChartDiv1") {
            _chart1 = chart;
        } else if (dom == "ChartDiv2") {
            _chart2 = chart;
        } else if (dom == "ChartDiv3") {
            _chart3 = chart;
        }
    }
    // compute correlation
    function computeCorrelation(chartDataProvider, startIndex, endIndex) {
        var X = 0;
        var Y = 0;
        var sumOfX = 0;
        var sumOfY = 0;
        var sumOfX2 = 0;
        var sumOfY2 = 0;
        var sumOfXY = 0;

        for (var i = startIndex - 1; i < endIndex - 1; i++) {
            X = X + 1;
            Y = parseFloat(chartDataProvider[i]["close"]);
            sumOfX = sumOfX + X;
            sumOfY = sumOfY + Y;
            sumOfXY = sumOfXY + (X * Y);
            sumOfX2 = sumOfX2 + (X * X);
            sumOfY2 = sumOfY2 + (Y * Y);
        }
        //r = Σ (xy) / sqrt [ ( Σ x2 ) * ( Σ y2 ) ]
        return (sumOfXY - ((sumOfX * sumOfY) / X)) / Math.sqrt(((sumOfX2 - ((sumOfX * sumOfX) / X)) * (sumOfY2 - ((sumOfY * sumOfY) / X)))); // Pearson
    }
    // draw magenta channel
    function drawMagentaChannel(chartPanel, channelData, startIndex, endIndex, magentaChannelTop, magentaChannelBot, magentaChannelMid) {
        var m = 0;
        var NumberOfDays = 0;

        // Get the number of days
        if (endIndex > 126) {
            NumberOfDays = 126 - startIndex + 1;
            chartNoOfDays = NumberOfDays;
        } else {
            NumberOfDays = endIndex - startIndex + 1;
        }
        //chartNoOfDays = NumberOfDays; // Use to display the Number of days in the chart.

        // Check for the correlation (you only check for the correlation if the data is more than 30 days onward)
        // Move the startIndex if the correlation is greater than 0.8 both ways to that day
        // Recompute the number of days to that day
        if (NumberOfDays > 30) {
            var correlationStartIndex = endIndex > 126 ? 126 : endIndex;
            var counter = 0;
            for (var i = correlationStartIndex; i > startIndex - 1; i--) {
                if (counter > 30) {
                    chartCoefficient = Math.abs(computeCorrelation(channelData, i, correlationStartIndex));
                    if (chartCoefficient <= 0.9) {
                        startIndex = i;
                        if (endIndex > 126) {
                            NumberOfDays = 126 - startIndex + 1;
                        } else {
                            NumberOfDays = endIndex - startIndex + 1;
                        }
                        break;
                    }
                }
                counter++;
            }
            //debugger;
        } else {
            if (startIndex <= 126) {
                chartCoefficient = Math.abs(computeCorrelation(channelData, startIndex, endIndex > 126 ? 126 : endIndex));
            }
        }
        //debugger;
        chartChannelNoOfDays = NumberOfDays; // Use to display the number of days in the channel.

        // Compute for the slope
        if (endIndex > 126) {
            m = (parseFloat(channelData[125]["close"]) - parseFloat(channelData[startIndex - 1]["close"])) / NumberOfDays;

            if (parseFloat(channelData[startIndex - 1]["close"]) == 0) {
                chartSlopePercentage = 0;
            } else {
                chartSlopePercentage = ((parseFloat(channelData[125]["close"]) - parseFloat(channelData[startIndex - 1]["close"])) / parseFloat(channelData[startIndex - 1]["close"])) * 100;
            }
        } else {
            m = (parseFloat(channelData[endIndex - 1]["close"]) - parseFloat(channelData[startIndex - 1]["close"])) / NumberOfDays;

            if (parseFloat(channelData[startIndex - 1]["close"]) == 0) {
                chartSlopePercentage = 0;
            } else {
                chartSlopePercentage = ((parseFloat(channelData[endIndex - 1]["close"]) - parseFloat(channelData[startIndex - 1]["close"])) / parseFloat(channelData[startIndex - 1]["close"])) * 100;
            }
        }

        // Prepare the data (intercepts)
        var b = [];
        for (var i = 0; i < NumberOfDays ; i++) {
            b[i] = parseFloat(channelData[i + startIndex - 1]["close"]) - (m * (i + 1));
        }
        b.sort(function (a, b) {
            return a - b;
        });

        // Set the b-intercepts
        var bMax = b[parseInt(NumberOfDays * .9)];
        var bMid = b[parseInt(NumberOfDays * .5)];
        var bMin = b[parseInt(NumberOfDays * .1)];

        if (bMin != 0) {
            chartChannelRange = ((bMax - bMin) / bMin) * 100;
        } else {
            chartChannelRange = 100;
        }

        // Plot the channels
        magentaChannelTop.lineColor = _greenColor;
        magentaChannelTop.initialDate = channelData[startIndex - 1]["date"];
        magentaChannelTop.finalDate = channelData[endIndex - 1]["date"];
        magentaChannelTop.initialValue = (m + bMax);
        magentaChannelTop.finalValue = ((m * (endIndex - startIndex + 1)) + bMax);
        magentaChannelTop.lineThickness = 2;
        chartPanel.addTrendLine(magentaChannelTop);

        magentaChannelBot.lineColor = _redColor;
        magentaChannelBot.initialDate = channelData[startIndex - 1]["date"];
        magentaChannelBot.finalDate = channelData[endIndex - 1]["date"];
        magentaChannelBot.initialValue = (m + bMin);
        magentaChannelBot.finalValue = ((m * (endIndex - startIndex + 1)) + bMin);
        magentaChannelBot.lineThickness = 2;
        chartPanel.addTrendLine(magentaChannelBot);

        magentaChannelMid.lineColor = _magentaColor;
        magentaChannelMid.initialDate = channelData[startIndex - 1]["date"];
        magentaChannelMid.finalDate = channelData[endIndex - 1]["date"];
        magentaChannelMid.initialValue = (m + bMid);
        magentaChannelMid.finalValue = ((m * (endIndex - startIndex + 1)) + bMid);
        magentaChannelMid.lineThickness = 1;
        chartPanel.addTrendLine(magentaChannelMid);

        chartPanel.validateNow();
    }
    // maximize and minimize div charts
    function maximizeChart(id) {
        $("#ChartData1").hide();
        $("#ChartData1").removeClass("col-lg-4");
        $("#ChartData2").hide();
        $("#ChartData2").removeClass("col-lg-4");
        $("#ChartData3").hide();
        $("#ChartData3").removeClass("col-lg-4");

        $("#ChartData" + id).show();
        $("#ChartData" + id).addClass("col-lg-12");

        if (id == '1') { _chart1.invalidateSize(); }
        if (id == '2') { _chart2.invalidateSize(); }
        if (id == '3') { _chart3.invalidateSize(); }
    }
    function minimizeChart(id) {
        $("#ChartData1").show();
        $("#ChartData1").addClass("col-lg-4");
        $("#ChartData2").show();
        $("#ChartData2").addClass("col-lg-4");
        $("#ChartData3").show();
        $("#ChartData3").addClass("col-lg-4");

        $("#ChartData" + id).removeClass("col-lg-12");

        if (id == '1') { _chart1.invalidateSize(); }
        if (id == '2') { _chart2.invalidateSize(); }
        if (id == '3') { _chart3.invalidateSize(); }
    }
    // chart settings modal
    function openChartSettings(id) {
        $('#ChartSettings').modal('show');

        _chartSettingsSequence = id;

        var chart;
        if (_chartSettingsSequence == '1') {
            chart = _chart1;
        } else if (_chartSettingsSequence == '2') {
            chart = _chart2;
        } else if (_chartSettingsSequence == '3') {
            chart = _chart3;
        }

        document.getElementById('ChartSettings_EnableCursor').checked = chart.chartCursorSettings.enabled;
        document.getElementById('ChartSettings_ShowVolume').checked = !chart.panels[0].graphs[1].hidden;
    }
    function applyChartSettings() {
        var chart;

        if (_chartSettingsSequence == '1') {
            chart = _chart1;
        } else if (_chartSettingsSequence == '2') {
            chart = _chart2;
        } else if (_chartSettingsSequence == '3') {
            chart = _chart3;
        }

        if (document.getElementById('ChartSettings_EnableCursor').checked == true) {
            chart.chartCursorSettings.enabled = true;
        } else {
            chart.chartCursorSettings.enabled = false;
        }

        if (document.getElementById('ChartSettings_ShowVolume').checked == true) {
            chart.panels[0].showGraph(chart.panels[0].graphs[1]);
        } else {
            chart.panels[0].hideGraph(chart.panels[0].graphs[1]);
        }

        chart.validateNow();

        $('#ChartSettings').modal('hide');
    }

    // =============
    // main function
    // =============
    $(document).ready(function () {
        $.ytLoad();

        var broker = getCookie("cookie_broker");
        if (broker == "Tradier") {
            if (getCookie("cookie_tradier_access_token") == "") {
                var tradier_scope = "@Tradier_scope";
                var tradier_state = "@Tradier_state";
                var tradier_code = "@Tradier_code";
                if (tradier_code != "") {
                    $.ajax({
                        type: 'GET',
                        url: '/api/tradierAccessToken/' + tradier_code,
                        success: function (result) {
                            var tradier_access_token = result.access_token == null ? "" : result.access_token;
                            if (tradier_access_token != "") {
                                setCookie("cookie_tradier_access_token", tradier_access_token, 1);
                                toastr.success("Connected to Tradier.");
                            } else {
                                toastr.error("Error connecting to Tradier.")
                            }
                            setStatus();
                        }
                    });
                }
            }
        } else if (broker == "Questrade") {
            toastr.error("Not yet applicable.");
        }

        setStatus();

    });
</script>